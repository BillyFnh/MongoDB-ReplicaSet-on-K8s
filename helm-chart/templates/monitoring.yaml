# kube-eagle deployment
---
apiVersion: v1        
kind: ServiceAccount
metadata:       
  labels:  
    app: kube-eagle
  name: sa-kube-eagle                         
  namespace: monitoring
---                     
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:          
  labels:                  
    app: kube-eagle      
  name: kube-eagle
  namespace: monitoring
rules:          
  - apiGroups:       
      - ""                 
    resources:
      - nodes
      - pods      
    verbs:                          
      - get                       
      - list                          
  - apiGroups:
      - metrics.k8s.io 
    resources:               
      - pods
      - nodes                          
    verbs:       
      - get               
      - list                                                  
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding          
metadata:                  
  labels:                            
    app: kube-eagle         
  name: kube-eagle
subjects:                        
  - kind: ServiceAccount   
    name: sa-kube-eagle
    namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-eagle
---
apiVersion: v1
kind: Service
metadata:
  name: kube-eagle
  namespace: monitoring
  labels:
    app: kube-eagle
spec:
  type: ClusterIP
#   type: NodePort
  ports:
    - port: 8080
      targetPort: http
#       nodePort: 30080
      protocol: TCP
      name: http
  selector:
    app: kube-eagle
    #release: release-name
    env: k8s-mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-eagle
  namespace: monitoring
  labels:
    app: kube-eagle
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-eagle
      #release: release-name
      env: k8s-mongo
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        app: kube-eagle
        #release: release-name
        env: k8s-mongo
    spec:
      serviceAccountName: sa-kube-eagle
      containers:
        - name: kube-eagle
          image: "quay.io/google-cloud-tools/kube-eagle:1.1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: TELEMETRY_HOST
              value: "0.0.0.0"
            - name: TELEMETRY_PORT
              value: "8080"
            - name: METRICS_NAMESPACE
              value: "eagle"
            - name: LOG_LEVEL
              value: "info"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          readinessProbe:
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          resources:
            {}
# prometheus-adapter deployment
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter-server-resources
rules:
- apiGroups:
  - custom.metrics.k8s.io
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter-resource-reader
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - pods
  - services
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter-resource-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-resource-reader
subjects:
- kind: ServiceAccount
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter-hpa-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-server-resources
subjects:
- kind: ServiceAccount
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter-auth-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    {}
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter
  namespace: monitoring
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 6443
    nodePort: 30007 
    #targetPort: https
  selector:
    app: prometheus-adapter
  type: NodePort

---

# create Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: prometheus-adapter
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-adapter
  template:
    metadata:
      labels:
        app: prometheus-adapter
        chart: prometheus-adapter-2.3.1
      name: prometheus-adapter
    spec:
      serviceAccountName: prometheus-adapter
      containers:
      - name: prometheus-adapter
        image: "directxman12/k8s-prometheus-adapter-amd64:v0.6.0"
        imagePullPolicy: IfNotPresent
        args:
        - /adapter
        - --secure-port=6443
        - --cert-dir=/tmp/cert
        - --logtostderr=true
        - --prometheus-url=http://prometheus-service.monitoring.svc:8080/
        - --metrics-relist-interval=1m
        - --v=6
        - --config=/etc/adapter/prometheus_adapter.yml
        ports:
        - containerPort: 6443
          name: https
        volumeMounts:
        - mountPath: /etc/adapter/
          name: config-volume
          readOnly: true
        - mountPath: /tmp
          name: tmp
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-adapter-configmap
      - name: tmp
        emptyDir: {}
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  labels:
    app: prometheus-adapter
    chart: prometheus-adapter-2.3.1
  name: v1beta1.custom.metrics.k8s.io
spec:
  service:
    name: prometheus-adapter
    namespace: monitoring
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
# prometheus deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: prometheus-server
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.1.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yaml"
            - "--storage.tsdb.path=/prometheus/"
            - "--storage.tsdb.retention=5d"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-secrets
              mountPath: /etc/prometheus
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-secrets
          secret:
            secretName: prometheus-secrets
        - name: prometheus-storage-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
  
spec:
  selector: 
    app: prometheus-server
  type: NodePort  
  ports:
    - port: 8080
      targetPort: 9090 
      nodePort: 30000
      name: prom-web
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
# logstash deployment
---
# # Reference:
# # https://hackernoon.com/deployment-of-full-scale-elk-stack-to-kubernetes-6f38f6c57c55
# # https://github.com/ITSvitCo/aws-k8s/tree/master/kubernetes-manifests/monitoring
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: logstash
#   namespace: monitoring
#   labels:
#     app: logstash
# spec:
#   selector:
#     matchLabels:
#       app: logstash
#   template:
#     metadata:
#       labels:
#         app: logstash
#     spec:
#       containers:
#       - image: docker.elastic.co/logstash/logstash:7.4.1
#         name: logstash
#         env:
#         - name: CMSWEB_CLUSTER
#           value: {{.Values.db.clusterName}}
#         - name: CMSWEB_ENV
#           value: {{.Values.db.env}}
#         - name: LS_JAVA_OPTS
#           value: "-Xms4g -Xmx4g"
#         ports:
#         - name: logstash
#           containerPort: 5044
#           protocol: TCP
#         volumeMounts:
#         - name: config
#           mountPath: /usr/share/logstash/config/logstash.yml
#           subPath: logstash.yml
#           readOnly: true
#         - name: pipeline
#           mountPath: /usr/share/logstash/pipeline
#           readOnly: true
#         args:
#         - -f
#         - /usr/share/logstash/pipeline/logstash.conf
#         resources:
#           requests:
#             memory: 4Gi
#             cpu: "400m"
#           limits:
#             memory: 8Gi
#             cpu: "4000m"
#       volumes:
#       - name: pipeline
#         configMap:
#           name: logstash
#           items:
#           - key: logstash.conf
#             path: logstash.conf
#       - name: config
#         configMap:
#           name: logstash
#           items:
#           - key: logstash.yml
#             path: logstash.yml
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: logstash
#   namespace: monitoring
#   labels:
#     app: logstash
# spec:
#   selector:
#     app: logstash
#   ports:
#   - name: logstash
#     port: 5044
#     targetPort: 5044
#     protocol: TCP
